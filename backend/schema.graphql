# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Device {
  id: ID!
  name: String
  ubication: String
  date_add: DateTime
  plant: Plant
  measurements(where: MeasurementWhereInput! = {}, orderBy: [MeasurementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MeasurementWhereUniqueInput): [Measurement!]
  measurementsCount(where: MeasurementWhereInput! = {}): Int
  images(where: UrlImageWhereInput! = {}, orderBy: [UrlImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UrlImageWhereUniqueInput): [UrlImage!]
  imagesCount(where: UrlImageWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input DeviceWhereUniqueInput {
  id: ID
  name: String
}

input DeviceWhereInput {
  AND: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  NOT: [DeviceWhereInput!]
  id: IDFilter
  name: StringFilter
  ubication: StringFilter
  date_add: DateTimeNullableFilter
  plant: PlantWhereInput
  measurements: MeasurementManyRelationFilter
  images: UrlImageManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input MeasurementManyRelationFilter {
  every: MeasurementWhereInput
  some: MeasurementWhereInput
  none: MeasurementWhereInput
}

input UrlImageManyRelationFilter {
  every: UrlImageWhereInput
  some: UrlImageWhereInput
  none: UrlImageWhereInput
}

input DeviceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  ubication: OrderDirection
  date_add: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input DeviceUpdateInput {
  name: String
  ubication: String
  date_add: DateTime
  plant: PlantRelateToOneForUpdateInput
  measurements: MeasurementRelateToManyForUpdateInput
  images: UrlImageRelateToManyForUpdateInput
}

input PlantRelateToOneForUpdateInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
  disconnect: Boolean
}

input MeasurementRelateToManyForUpdateInput {
  disconnect: [MeasurementWhereUniqueInput!]
  set: [MeasurementWhereUniqueInput!]
  create: [MeasurementCreateInput!]
  connect: [MeasurementWhereUniqueInput!]
}

input UrlImageRelateToManyForUpdateInput {
  disconnect: [UrlImageWhereUniqueInput!]
  set: [UrlImageWhereUniqueInput!]
  create: [UrlImageCreateInput!]
  connect: [UrlImageWhereUniqueInput!]
}

input DeviceUpdateArgs {
  where: DeviceWhereUniqueInput!
  data: DeviceUpdateInput!
}

input DeviceCreateInput {
  name: String
  ubication: String
  date_add: DateTime
  plant: PlantRelateToOneForCreateInput
  measurements: MeasurementRelateToManyForCreateInput
  images: UrlImageRelateToManyForCreateInput
}

input PlantRelateToOneForCreateInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
}

input MeasurementRelateToManyForCreateInput {
  create: [MeasurementCreateInput!]
  connect: [MeasurementWhereUniqueInput!]
}

input UrlImageRelateToManyForCreateInput {
  create: [UrlImageCreateInput!]
  connect: [UrlImageWhereUniqueInput!]
}

type GuestUser {
  id: ID!
  id_azure: String
  name: String
  email: String
}

input GuestUserWhereUniqueInput {
  id: ID
  id_azure: String
  email: String
}

input GuestUserWhereInput {
  AND: [GuestUserWhereInput!]
  OR: [GuestUserWhereInput!]
  NOT: [GuestUserWhereInput!]
  id: IDFilter
  id_azure: StringFilter
  name: StringFilter
  email: StringFilter
}

input GuestUserOrderByInput {
  id: OrderDirection
  id_azure: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input GuestUserUpdateInput {
  id_azure: String
  name: String
  email: String
}

input GuestUserUpdateArgs {
  where: GuestUserWhereUniqueInput!
  data: GuestUserUpdateInput!
}

input GuestUserCreateInput {
  id_azure: String
  name: String
  email: String
}

type Measurement {
  id: ID!
  date_add: DateTime
  temperature: Float
  humidity: Float
  light: Float
  plant: Plant
  device: Device
  recommendations(where: RecommendationWhereInput! = {}, orderBy: [RecommendationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecommendationWhereUniqueInput): [Recommendation!]
  recommendationsCount(where: RecommendationWhereInput! = {}): Int
}

input MeasurementWhereUniqueInput {
  id: ID
}

input MeasurementWhereInput {
  AND: [MeasurementWhereInput!]
  OR: [MeasurementWhereInput!]
  NOT: [MeasurementWhereInput!]
  id: IDFilter
  date_add: DateTimeNullableFilter
  temperature: FloatNullableFilter
  humidity: FloatNullableFilter
  light: FloatNullableFilter
  plant: PlantWhereInput
  device: DeviceWhereInput
  recommendations: RecommendationManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input RecommendationManyRelationFilter {
  every: RecommendationWhereInput
  some: RecommendationWhereInput
  none: RecommendationWhereInput
}

input MeasurementOrderByInput {
  id: OrderDirection
  date_add: OrderDirection
  temperature: OrderDirection
  humidity: OrderDirection
  light: OrderDirection
}

input MeasurementUpdateInput {
  date_add: DateTime
  temperature: Float
  humidity: Float
  light: Float
  plant: PlantRelateToOneForUpdateInput
  device: DeviceRelateToOneForUpdateInput
  recommendations: RecommendationRelateToManyForUpdateInput
}

input DeviceRelateToOneForUpdateInput {
  create: DeviceCreateInput
  connect: DeviceWhereUniqueInput
  disconnect: Boolean
}

input RecommendationRelateToManyForUpdateInput {
  disconnect: [RecommendationWhereUniqueInput!]
  set: [RecommendationWhereUniqueInput!]
  create: [RecommendationCreateInput!]
  connect: [RecommendationWhereUniqueInput!]
}

input MeasurementUpdateArgs {
  where: MeasurementWhereUniqueInput!
  data: MeasurementUpdateInput!
}

input MeasurementCreateInput {
  date_add: DateTime
  temperature: Float
  humidity: Float
  light: Float
  plant: PlantRelateToOneForCreateInput
  device: DeviceRelateToOneForCreateInput
  recommendations: RecommendationRelateToManyForCreateInput
}

input DeviceRelateToOneForCreateInput {
  create: DeviceCreateInput
  connect: DeviceWhereUniqueInput
}

input RecommendationRelateToManyForCreateInput {
  create: [RecommendationCreateInput!]
  connect: [RecommendationWhereUniqueInput!]
}

type Plant {
  id: ID!
  name: String
  date_add: DateTime
  devices(where: DeviceWhereInput! = {}, orderBy: [DeviceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeviceWhereUniqueInput): [Device!]
  devicesCount(where: DeviceWhereInput! = {}): Int
  measurements(where: MeasurementWhereInput! = {}, orderBy: [MeasurementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MeasurementWhereUniqueInput): [Measurement!]
  measurementsCount(where: MeasurementWhereInput! = {}): Int
}

input PlantWhereUniqueInput {
  id: ID
}

input PlantWhereInput {
  AND: [PlantWhereInput!]
  OR: [PlantWhereInput!]
  NOT: [PlantWhereInput!]
  id: IDFilter
  name: StringFilter
  date_add: DateTimeNullableFilter
  devices: DeviceManyRelationFilter
  measurements: MeasurementManyRelationFilter
}

input DeviceManyRelationFilter {
  every: DeviceWhereInput
  some: DeviceWhereInput
  none: DeviceWhereInput
}

input PlantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  date_add: OrderDirection
}

input PlantUpdateInput {
  name: String
  date_add: DateTime
  devices: DeviceRelateToManyForUpdateInput
  measurements: MeasurementRelateToManyForUpdateInput
}

input DeviceRelateToManyForUpdateInput {
  disconnect: [DeviceWhereUniqueInput!]
  set: [DeviceWhereUniqueInput!]
  create: [DeviceCreateInput!]
  connect: [DeviceWhereUniqueInput!]
}

input PlantUpdateArgs {
  where: PlantWhereUniqueInput!
  data: PlantUpdateInput!
}

input PlantCreateInput {
  name: String
  date_add: DateTime
  devices: DeviceRelateToManyForCreateInput
  measurements: MeasurementRelateToManyForCreateInput
}

input DeviceRelateToManyForCreateInput {
  create: [DeviceCreateInput!]
  connect: [DeviceWhereUniqueInput!]
}

type Recommendation {
  id: ID!
  description: String
  date_add: DateTime
  measurement: Measurement
}

input RecommendationWhereUniqueInput {
  id: ID
}

input RecommendationWhereInput {
  AND: [RecommendationWhereInput!]
  OR: [RecommendationWhereInput!]
  NOT: [RecommendationWhereInput!]
  id: IDFilter
  description: StringFilter
  date_add: DateTimeNullableFilter
  measurement: MeasurementWhereInput
}

input RecommendationOrderByInput {
  id: OrderDirection
  description: OrderDirection
  date_add: OrderDirection
}

input RecommendationUpdateInput {
  description: String
  date_add: DateTime
  measurement: MeasurementRelateToOneForUpdateInput
}

input MeasurementRelateToOneForUpdateInput {
  create: MeasurementCreateInput
  connect: MeasurementWhereUniqueInput
  disconnect: Boolean
}

input RecommendationUpdateArgs {
  where: RecommendationWhereUniqueInput!
  data: RecommendationUpdateInput!
}

input RecommendationCreateInput {
  description: String
  date_add: DateTime
  measurement: MeasurementRelateToOneForCreateInput
}

input MeasurementRelateToOneForCreateInput {
  create: MeasurementCreateInput
  connect: MeasurementWhereUniqueInput
}

type UrlImage {
  id: ID!
  url_image: String
  date_add: DateTime
  device: Device
}

input UrlImageWhereUniqueInput {
  id: ID
}

input UrlImageWhereInput {
  AND: [UrlImageWhereInput!]
  OR: [UrlImageWhereInput!]
  NOT: [UrlImageWhereInput!]
  id: IDFilter
  url_image: StringFilter
  date_add: DateTimeNullableFilter
  device: DeviceWhereInput
}

input UrlImageOrderByInput {
  id: OrderDirection
  url_image: OrderDirection
  date_add: OrderDirection
}

input UrlImageUpdateInput {
  url_image: String
  date_add: DateTime
  device: DeviceRelateToOneForUpdateInput
}

input UrlImageUpdateArgs {
  where: UrlImageWhereUniqueInput!
  data: UrlImageUpdateInput!
}

input UrlImageCreateInput {
  url_image: String
  date_add: DateTime
  device: DeviceRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createDevice(data: DeviceCreateInput!): Device
  createDevices(data: [DeviceCreateInput!]!): [Device]
  updateDevice(where: DeviceWhereUniqueInput!, data: DeviceUpdateInput!): Device
  updateDevices(data: [DeviceUpdateArgs!]!): [Device]
  deleteDevice(where: DeviceWhereUniqueInput!): Device
  deleteDevices(where: [DeviceWhereUniqueInput!]!): [Device]
  createGuestUser(data: GuestUserCreateInput!): GuestUser
  createGuestUsers(data: [GuestUserCreateInput!]!): [GuestUser]
  updateGuestUser(where: GuestUserWhereUniqueInput!, data: GuestUserUpdateInput!): GuestUser
  updateGuestUsers(data: [GuestUserUpdateArgs!]!): [GuestUser]
  deleteGuestUser(where: GuestUserWhereUniqueInput!): GuestUser
  deleteGuestUsers(where: [GuestUserWhereUniqueInput!]!): [GuestUser]
  createMeasurement(data: MeasurementCreateInput!): Measurement
  createMeasurements(data: [MeasurementCreateInput!]!): [Measurement]
  updateMeasurement(where: MeasurementWhereUniqueInput!, data: MeasurementUpdateInput!): Measurement
  updateMeasurements(data: [MeasurementUpdateArgs!]!): [Measurement]
  deleteMeasurement(where: MeasurementWhereUniqueInput!): Measurement
  deleteMeasurements(where: [MeasurementWhereUniqueInput!]!): [Measurement]
  createPlant(data: PlantCreateInput!): Plant
  createPlants(data: [PlantCreateInput!]!): [Plant]
  updatePlant(where: PlantWhereUniqueInput!, data: PlantUpdateInput!): Plant
  updatePlants(data: [PlantUpdateArgs!]!): [Plant]
  deletePlant(where: PlantWhereUniqueInput!): Plant
  deletePlants(where: [PlantWhereUniqueInput!]!): [Plant]
  createRecommendation(data: RecommendationCreateInput!): Recommendation
  createRecommendations(data: [RecommendationCreateInput!]!): [Recommendation]
  updateRecommendation(where: RecommendationWhereUniqueInput!, data: RecommendationUpdateInput!): Recommendation
  updateRecommendations(data: [RecommendationUpdateArgs!]!): [Recommendation]
  deleteRecommendation(where: RecommendationWhereUniqueInput!): Recommendation
  deleteRecommendations(where: [RecommendationWhereUniqueInput!]!): [Recommendation]
  createUrlImage(data: UrlImageCreateInput!): UrlImage
  createUrlImages(data: [UrlImageCreateInput!]!): [UrlImage]
  updateUrlImage(where: UrlImageWhereUniqueInput!, data: UrlImageUpdateInput!): UrlImage
  updateUrlImages(data: [UrlImageUpdateArgs!]!): [UrlImage]
  deleteUrlImage(where: UrlImageWhereUniqueInput!): UrlImage
  deleteUrlImages(where: [UrlImageWhereUniqueInput!]!): [UrlImage]
}

type Query {
  device(where: DeviceWhereUniqueInput!): Device
  devices(where: DeviceWhereInput! = {}, orderBy: [DeviceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DeviceWhereUniqueInput): [Device!]
  devicesCount(where: DeviceWhereInput! = {}): Int
  guestUser(where: GuestUserWhereUniqueInput!): GuestUser
  guestUsers(where: GuestUserWhereInput! = {}, orderBy: [GuestUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GuestUserWhereUniqueInput): [GuestUser!]
  guestUsersCount(where: GuestUserWhereInput! = {}): Int
  measurement(where: MeasurementWhereUniqueInput!): Measurement
  measurements(where: MeasurementWhereInput! = {}, orderBy: [MeasurementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MeasurementWhereUniqueInput): [Measurement!]
  measurementsCount(where: MeasurementWhereInput! = {}): Int
  plant(where: PlantWhereUniqueInput!): Plant
  plants(where: PlantWhereInput! = {}, orderBy: [PlantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlantWhereUniqueInput): [Plant!]
  plantsCount(where: PlantWhereInput! = {}): Int
  recommendation(where: RecommendationWhereUniqueInput!): Recommendation
  recommendations(where: RecommendationWhereInput! = {}, orderBy: [RecommendationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RecommendationWhereUniqueInput): [Recommendation!]
  recommendationsCount(where: RecommendationWhereInput! = {}): Int
  urlImage(where: UrlImageWhereUniqueInput!): UrlImage
  urlImages(where: UrlImageWhereInput! = {}, orderBy: [UrlImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UrlImageWhereUniqueInput): [UrlImage!]
  urlImagesCount(where: UrlImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
